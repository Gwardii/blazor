@page "/"
@page "/events"
@page "/register"
@page "/attendance"
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions

<script src="https://cdn.tailwindcss.com"></script>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
<style>
    body { font-family: 'Inter', sans-serif; }
</style>

<div class="min-h-screen bg-gray-100 font-sans text-gray-900 flex flex-col items-center py-8">
    <nav class="w-full bg-indigo-700 shadow-lg mb-8 rounded-lg max-w-4xl">
        <div class="container mx-auto p-4 flex justify-between items-center">
            <div class="text-white text-2xl font-bold">EventEase</div>
            <div class="space-x-6">
                <button @onclick="() => Navigate(&quot;home&quot;)" class="text-white hover:text-indigo-200 transition duration-300 font-medium text-lg">
                    Home
                </button>
                <button @onclick="() => Navigate(&quot;events&quot;)" class="text-white hover:text-indigo-200 transition duration-300 font-medium text-lg">
                    Events
                </button>
                @if (!IsLoggedIn)
                {
                    <button @onclick="() => Navigate(&quot;register&quot;)" class="bg-indigo-500 text-white px-5 py-2 rounded-md hover:bg-indigo-600 transition duration-300 shadow-md font-medium text-lg">
                        Register
                    </button>
                }
                else
                {
                    <button @onclick="() => Navigate(&quot;attendance&quot;)" class="text-white hover:text-indigo-200 transition duration-300 font-medium text-lg">
                        Attendance
                    </button>
                    <span class="text-white text-lg ml-4">Welcome, @CurrentUser!</span>
                    <button @onclick="HandleLogout" class="bg-red-500 text-white px-5 py-2 rounded-md hover:bg-red-600 transition duration-300 shadow-md font-medium text-lg">
                        Logout
                    </button>
                }
            </div>
        </div>
    </nav>

    <main class="w-full max-w-4xl">
        @RenderPage()
    </main>
</div>

@code {
    private string CurrentPage { get; set; } = "home";
    private bool IsLoggedIn { get; set; } = false;
    private string CurrentUser { get; set; } = string.Empty;

    private List<Event> Events { get; set; } = new List<Event>
    {
        new Event { Id = "e1", Name = "Tech Conference 2024", Date = "2024-10-26", Location = "Convention Center", Description = "Annual tech conference featuring keynote speakers and workshops." },
        new Event { Id = "e2", Name = "Community Garden Day", Date = "2024-08-15", Location = "Central Park", Description = "Volunteer day to help maintain the community garden." },
        new Event { Id = "e3", Name = "Art Exhibition Opening", Date = "2024-09-01", Location = "City Art Gallery", Description = "Opening night for the new contemporary art exhibition." },
    };

    private List<Attendee> Attendees { get; set; } = new List<Attendee>();

    private void Navigate(string page)
    {
        CurrentPage = page;
        StateHasChanged();
    }

    private void HandleLogin(string username)
    {
        IsLoggedIn = true;
        CurrentUser = username;
        StateHasChanged();
    }

    private void HandleLogout()
    {
        IsLoggedIn = false;
        CurrentUser = string.Empty;
        Navigate("home");
    }

    private void AddAttendee(Attendee newAttendee)
    {
        Attendees.Add(newAttendee);
        Navigate("attendance");
    }

    private RenderFragment RenderPage() => builder =>
    {
        switch (CurrentPage)
        {
            case "home":
                builder.AddContent(0, @<HomePage />);
                break;
            case "events":
                builder.AddContent(0, @<EventList />);
                break;
            case "register":
                builder.AddContent(0, @<RegistrationForm OnRegister="AddAttendee" />);
                break;
            case "attendance":
                builder.AddContent(0, @<AttendanceTracker />);
                break;
            default:
                builder.AddContent(0, @<NotFoundPage />);
                break;
        }
    };

    public class Event
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    public class Attendee
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }

    public class RegistrationData
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private RenderFragment HomePage => @<div class="text-center p-8 bg-white rounded-xl shadow-lg border border-gray-200 max-w-2xl mx-auto">
        <h2 class="text-4xl font-extrabold text-indigo-800 mb-4">Welcome to EventEase!</h2>
        <p class="text-lg text-gray-700 mb-6">
            Your ultimate platform for discovering and managing events.
        </p>
        @if (!IsLoggedIn)
        {
            <button @onclick="() => Navigate(&quot;register&quot;)" class="bg-green-600 text-white px-8 py-3 rounded-md text-lg font-semibold hover:bg-green-700 transition duration-300 ease-in-out shadow-md">
                Register Now
            </button>
        }
        else
        {
            <p class="text-xl text-gray-800 font-medium">Hello, @CurrentUser! Explore events or track attendance.</p>
        }
    </div>;

    private RenderFragment EventList => @<div class="container mx-auto p-4 max-w-2xl">
        <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">Available Events</h2>
        @foreach (var eventItem in Events)
        {
            <EventCard EventItem="eventItem" OnUpdate="HandleUpdateEvent" />
        }
    </div>;

    private void HandleUpdateEvent(Event updatedEvent)
    {
        var index = Events.FindIndex(e => e.Id == updatedEvent.Id);
        if (index != -1)
        {
            Events[index] = updatedEvent;
            StateHasChanged();
        }
    }

    private RenderFragment EventCard(Event EventItem, Action<Event> OnUpdate) => @<div class="bg-white p-6 rounded-xl shadow-md border border-gray-200 mb-4">
        <h3 class="text-xl font-semibold mb-2 text-indigo-700">
            <input
                type="text"
                class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                @bind-value="EventItem.Name"
                @bind-value:event="oninput" />
        </h3>
        <p class="text-gray-700 mb-1">
            <span class="font-medium">Date:</span>
            <input
                type="date"
                class="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                @bind-value="EventItem.Date"
                @bind-value:event="oninput" />
        </p>
        <p class="text-gray-700 mb-1">
            <span class="font-medium">Location:</span>
            <input
                type="text"
                class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                @bind-value="EventItem.Location"
                @bind-value:event="oninput" />
        </p>
        <p class="text-gray-700">
            <span class="font-medium">Description:</span>
            <textarea
                class="w-full p-2 border border-gray-300 rounded-md resize-y focus:outline-none focus:ring-2 focus:ring-indigo-500"
                rows="3"
                @bind-value="EventItem.Description"
                @bind-value:event="oninput"></textarea>
        </p>
    </div>;

    private RenderFragment RegistrationForm(Action<Attendee> OnRegister) => @<div class="container mx-auto p-4 max-w-md bg-white rounded-xl shadow-lg border border-gray-200">
        <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">Register for EventEase</h2>
        <form @onsubmit="HandleRegistrationSubmit" class="space-y-4">
            <div>
                <label for="name" class="block text-gray-700 font-medium mb-1">
                    Name
                </label>
                <input
                    type="text"
                    id="name"
                    @bind-value="RegistrationModel.Name"
                    class="@(Errors.ContainsKey(&quot;Name&quot;) ? &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-red-500 ring-red-200&quot; : &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-gray-300 focus:ring-indigo-500&quot;)" />
                @if (Errors.ContainsKey("Name"))
                {
                    <p class="text-red-500 text-sm mt-1">@Errors["Name"]</p>
                }
            </div>
            <div>
                <label for="email" class="block text-gray-700 font-medium mb-1">
                    Email
                </label>
                <input
                    type="email"
                    id="email"
                    @bind-value="RegistrationModel.Email"
                    class="@(Errors.ContainsKey(&quot;Email&quot;) ? &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-red-500 ring-red-200&quot; : &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-gray-300 focus:ring-indigo-500&quot;)" />
                @if (Errors.ContainsKey("Email"))
                {
                    <p class="text-red-500 text-sm mt-1">@Errors["Email"]</p>
                }
            </div>
            <div>
                <label for="password" class="block text-gray-700 font-medium mb-1">
                    Password
                </label>
                <input
                    type="password"
                    id="password"
                    @bind-value="RegistrationModel.Password"
                    class="@(Errors.ContainsKey(&quot;Password&quot;) ? &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-red-500 ring-red-200&quot; : &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-gray-300 focus:ring-indigo-500&quot;)" />
                @if (Errors.ContainsKey("Password"))
                {
                    <p class="text-red-500 text-sm mt-1">@Errors["Password"]</p>
                }
            </div>
            <div>
                <label for="confirmPassword" class="block text-gray-700 font-medium mb-1">
                    Confirm Password
                </label>
                <input
                    type="password"
                    id="confirmPassword"
                    @bind-value="RegistrationModel.ConfirmPassword"
                    class="@(Errors.ContainsKey(&quot;ConfirmPassword&quot;) ? &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-red-500 ring-red-200&quot; : &quot;w-full p-3 border rounded-md focus:outline-none focus:ring-2 border-gray-300 focus:ring-indigo-500&quot;)" />
                @if (Errors.ContainsKey("ConfirmPassword"))
                {
                    <p class="text-red-500 text-sm mt-1">@Errors["ConfirmPassword"]</p>
                }
            </div>
            <button
                type="submit"
                class="w-full bg-indigo-600 text-white p-3 rounded-md font-semibold hover:bg-indigo-700 transition duration-300 ease-in-out shadow-md">
                Register
            </button>
            @if (!string.IsNullOrEmpty(Message))
            {
                <p class="@(Errors.Any() ? &quot;text-center mt-4 text-red-600&quot; : &quot;text-center mt-4 text-green-600&quot;)">
                    @Message
                </p>
            }
        </form>
    </div>;

    private RegistrationData RegistrationModel { get; set; } = new RegistrationData();
    private Dictionary<string, string> Errors { get; set; } = new Dictionary<string, string>();
    private string Message { get; set; } = string.Empty;

    private void HandleRegistrationSubmit()
    {
        if (ValidateRegistration())
        {
            Console.WriteLine("Registration successful:" + System.Text.Json.JsonSerializer.Serialize(RegistrationModel));
            Message = "Registration successful!";
            HandleLogin(RegistrationModel.Name);
            AddAttendee(new Attendee { Id = Guid.NewGuid().ToString(), Name = RegistrationModel.Name, Email = RegistrationModel.Email });
            RegistrationModel = new RegistrationData();
            Errors.Clear();
        }
        else
        {
            Message = "Please correct the errors in the form.";
        }
    }

    private bool ValidateRegistration()
    {
        Errors.Clear();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(RegistrationModel.Name))
        {
            Errors["Name"] = "Name is required";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(RegistrationModel.Email))
        {
            Errors["Email"] = "Email is required";
            isValid = false;
        }
        else if (!Regex.IsMatch(RegistrationModel.Email, @"\S+@\S+\.\S+"))
        {
            Errors["Email"] = "Email is invalid";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(RegistrationModel.Password))
        {
            Errors["Password"] = "Password is required";
            isValid = false;
        }
        else if (RegistrationModel.Password.Length < 6)
        {
            Errors["Password"] = "Password must be at least 6 characters";
            isValid = false;
        }
        if (RegistrationModel.Password != RegistrationModel.ConfirmPassword)
        {
            Errors["ConfirmPassword"] = "Passwords do not match";
            isValid = false;
        }

        StateHasChanged();
        return isValid;
    }

    private RenderFragment AttendanceTracker => @<div class="container mx-auto p-4 max-w-xl bg-white rounded-xl shadow-lg border border-gray-200">
        <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">Attendance Tracker</h2>
        @if (Attendees.Any())
        {
            <ul class="list-disc pl-5 space-y-2">
                @foreach (var attendee in Attendees)
                {
                    <li class="bg-gray-50 p-3 rounded-md shadow-sm">
                        <span class="font-semibold text-indigo-700">@attendee.Name</span> - @attendee.Email
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-center text-gray-600">No attendees registered yet.</p>
        }
    </div>;

    private RenderFragment NotFoundPage => @<div class="text-center p-8 bg-red-50 rounded-xl shadow-lg border border-red-200 max-w-xl mx-auto">
        <h2 class="text-4xl font-bold text-red-700 mb-4">404 - Page Not Found</h2>
        <p class="text-lg text-red-600">The page you are looking for does not exist.</p>
        <button @onclick="() => Navigate(&quot;home&quot;)" class="mt-6 bg-red-600 text-white px-6 py-2 rounded-md hover:bg-red-700 transition duration-300 ease-in-out">
            Go to Home
        </button>
    </div>;
}
